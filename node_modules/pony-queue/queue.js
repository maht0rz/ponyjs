module.exports = function(){
    
    var self = this;
    
    /*
        Amount of actions executed by the queue from it's start.
    */
    this.counter = 0;
    
    this.events = new (require('events').EventEmitter);

    /*
        This function is passed to every queue action. Calling this function
        signals the queue to start executing the next action.
        
        If queue is being handled asynchronously, it just signals that one of the actions
        has finished executing.
    */
    this.next = function(){
        
        self.counter++;
        self.events.emit('next');
    };
    
    /*
        Checks if upcomming queue item is a function
    */
    this.isFunction = function(){
        
        if( typeof this.stack[this.counter] == 'function' ){
            return true;
        }
    };
    
    /*
        Executes the upcomming queue function
    */
    this.executeFunction = function(){
        
        this.stack[this.counter].apply(null, [self.next]);
    };
    
    /*
        Starts asynchronous queue execution
    */
    this.startAsync = function(stack){
        
        this.stack = stack;
        
        this.events.on('next', function(){
            self.asyncNext();
        });
        
        this.stack.forEach(function(action){
           action.apply(null, [self.next]); 
        });
    };
    
    /*
        Starts synchronous queue execution
    */
    this.startSync = function(stack){
        
        this.stack = stack;
        
        this.events.on('next', function(){
            self.syncNext();
        });
        
        self.syncNext();
    };
    
    /*
        Checks if all the functions have executed, if yes
        emits 'ready' event
    */
    this.asyncNext = function(){
       
        if( this.counter == this.stack.length ){
            this.events.emit('ready');
        }
    };
    
    /*
        Checks if next function is callable, if yes executes it.
        If no emits 'ready' event.
    */
    this.syncNext = function(){
        
        if( this.isFunction() ){
            this.executeFunction();
        }else{
            this.events.emit('ready');
        }     
    };
    
};