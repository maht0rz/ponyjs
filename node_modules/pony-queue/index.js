/*
  
                                                    /$$$$$          
                                                   |__  $$          
      /$$$$$$   /$$$$$$  /$$$$$$$  /$$   /$$          | $$  /$$$$$$$
     /$$__  $$ /$$__  $$| $$__  $$| $$  | $$          | $$ /$$_____/
    | $$  \ $$| $$  \ $$| $$  \ $$| $$  | $$     /$$  | $$|  $$$$$$ 
    | $$  | $$| $$  | $$| $$  | $$| $$  | $$    | $$  | $$ \____  $$
    | $$$$$$$/|  $$$$$$/| $$  | $$|  $$$$$$$ /$$|  $$$$$$/ /$$$$$$$/
    | $$____/  \______/ |__/  |__/ \____  $$|__/ \______/ |_______/ 
    | $$                           /$$  | $$                        
    | $$                          |  $$$$$$/                        
    |__/                           \______/                                                                                                             
    
    Built by Matej Sima a.k.a. @maht0rz in 2014.
    
    Queue component of pony.js nodejs framework. 
    
    # What is queue for?
        
        Nodejs provides a beatiful way to asynchronously handle various time-hungry
        operations such as file reading. Queue enables you to line up pieces of code
        in form of closures, to execute one after another (synchronous), or all
        at once (asynchronous).
    
    # Why should i use it?
        
        Often we have to face situations, where we need to stack callbacks, for instance
        we might have to load a config file before further execution of our code. In this
        exact case we could utilize the queue component to achieve simple but effective
        callback stacking.
        
    # How do i use it?
    
        Let's say we have to load 2 configuration files, and then proceed with execution of
        our script. Require the pony-queue component to your script, and start stacking functions
        to the queue. First function loads both files, and when they are loaded, it calls next(); 
        which is passed as a parameter to all stacked queue functions, and signals the queue
        to continue with next function. If you have your functions stacked, start the queue. You 
        may choose from two options regarding the way function are executed, when starting
        the queue. Execution may be either synchronous or asynchronous. Also callback needs
        to be passed when starting the queue. The callback is executed when no other queue functions
        are left.
        
        Note: If queue is executed asynchronously, next(); does not signal the queue to continue with
        next function. Instead it just simply increases the counter of executed functions, to run the
        callback when queue is empty.
        
    # API
        
        Complete API for queue operations is written out at ./interface.js file.
    
    # Example
        
        // Require pony-queue component
        var Q = require('pony-queue');
        // Construct a new queue
        var queue = new Q;
        var fs = require('fs');
        
        // Add asynchronous file read callback to the queue,
        // wrapped into a function, calling next(); when file is loaded
        queue.add(function(next){
           fs.readFile('config.json','utf-8', function(err, data){
               console.log(data);
               next();
           });
        });
        
        // Log to console in order to demonstrate the functionality 
        // of the queue. Question will be asked after the file will be loaded
        queue.add(function(next){
           console.log('What is the meaning of life?');
           next();
        });

        // Answering the question asked happens after the previous function gets executed
        queue.add(function(next){
           console.log('Answer is 42');
           next();
        });
        
        // Start the queue execution, with a fancy callback message at the end
        queue.start(false, function(){
            console.log('Config loaded, question answered!');
        });
        
        
        # OUTPUT
        
        {
            'name': 'matej'
        }
        What is the meaning of life?
        Answer is 42
        Config loaded, question answered!
        
        
        
        // Change .start(false... ); to .start(true...), and output will change also,
        // because reading the config file requires some time:
        
        What is the meaning of life?
        Answer is 42
        {
            'name': 'matej'
        }
        Config loaded, question answered!

   
        
*/

var interface = require('./interface');
var queue = require('./queue');

module.exports = function(){
    return new interface( new queue );
}